version: '3.8'

services:
  # API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    image: cognitive-meeting-api:latest
    container_name: cognitive-api
    environment:
      - DATABASE_URL=sqlite+aiosqlite:///data/memories.db
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONPATH=/app:/app/src
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./models:/app/models:ro
    depends_on:
      qdrant:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - cognitive-network

  # Development API Service
  api-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    image: cognitive-meeting-api:dev
    container_name: cognitive-api-dev
    environment:
      - DATABASE_URL=sqlite+aiosqlite:///data/memories.db
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - LOG_LEVEL=DEBUG
      - PYTHONPATH=/app:/app/src
    ports:
      - "${API_DEV_PORT:-8001}:8000"
    volumes:
      - .:/app
      - ./data:/app/data
      - ./logs:/app/logs
      - ./models:/app/models
    depends_on:
      qdrant:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - cognitive-network
    profiles:
      - development

  # Vector Database
  qdrant:
    image: qdrant/qdrant:v1.8.4
    container_name: cognitive-qdrant
    ports:
      - "${QDRANT_PORT:-6333}:6333"
      - "${QDRANT_GRPC_PORT:-6334}:6334"
    volumes:
      - qdrant_storage:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__LOG_LEVEL=INFO
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped
    networks:
      - cognitive-network

  # PostgreSQL (alternative to SQLite for production)
  postgres:
    image: postgres:16-alpine
    container_name: cognitive-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-cognitive_meetings}
      - POSTGRES_USER=${POSTGRES_USER:-cognitive}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeme}
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_postgres.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-cognitive} -d ${POSTGRES_DB:-cognitive_meetings}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - cognitive-network
    profiles:
      - postgres

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: cognitive-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - cognitive-network
    profiles:
      - cache

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: cognitive-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: unless-stopped
    networks:
      - cognitive-network
    profiles:
      - monitoring

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: cognitive-grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - cognitive-network
    profiles:
      - monitoring

  # Test Runner
  test:
    build:
      context: .
      dockerfile: Dockerfile
      target: testing
    image: cognitive-meeting-api:test
    container_name: cognitive-test
    environment:
      - DATABASE_URL=sqlite+aiosqlite:///tmp/test_memories.db
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - TESTING=1
    volumes:
      - .:/app
      - ./test-results:/app/test-results
    depends_on:
      qdrant:
        condition: service_healthy
    networks:
      - cognitive-network
    profiles:
      - test

volumes:
  qdrant_storage:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  cognitive-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16