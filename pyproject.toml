[tool.poetry]
name = "cognitive-meeting-intelligence"
version = "0.1.0"
description = "A cognitive meeting intelligence system that transforms meeting transcripts into queryable memory networks"
authors = ["Your Name <you@example.com>"]
readme = "README.md"
license = "MIT"
repository = "https://github.com/yourusername/meet"
keywords = ["nlp", "meeting-intelligence", "cognitive-computing", "vector-search", "memory-networks"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.11"

# Web framework
fastapi = "^0.109.0"
uvicorn = {extras = ["standard"], version = "^0.27.0"}
pydantic = "^2.11.7"
pydantic-settings = "^2.10.1"

# HTTP client
aiohttp = "^3.9.1"

# Database
aiosqlite = "^0.19.0"
sqlalchemy = "^2.0.25"

# Vector database
qdrant-client = "^1.8.2"

# ML/Data Processing
numpy = "^1.26.4"
onnxruntime = "^1.17.3"
transformers = "^4.38.2"
scikit-learn = "^1.4.0"
sentence-transformers = "^2.2.2"

# Text analysis
vaderSentiment = "^3.3.2"
nltk = "^3.8.1"

# Utilities
python-dotenv = "^1.0.0"
click = "^8.1.7"
rich = "^13.7.0"
loguru = "^0.7.2"
python-multipart = "^0.0.20"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-benchmark = "^4.0.0"
coverage = {extras = ["toml"], version = "^7.0"}

# Code quality
black = "^23.11.0"
flake8 = "^6.1.0"
flake8-docstrings = "^1.7.0"
flake8-bugbear = "^23.0.0"
isort = "^5.12.0"
mypy = "^1.7.1"
bandit = "^1.7.5"

# Type stubs
types-requests = "^2.31.0"
types-setuptools = "^69.0.0"

# Development tools
ipython = "^8.18.0"
ipdb = "^0.13.13"
watchdog = "^3.0.0"
memory-profiler = "^0.61.0"

[tool.poetry.group.security.dependencies]
safety = "^2.3.5"
pip-audit = "^2.6.1"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.3"
mkdocs-material = "^9.5.0"
mkdocstrings = {extras = ["python"], version = "^0.24.0"}

[tool.poetry.group.ml-convert]
optional = true

[tool.poetry.group.ml-convert.dependencies]
torch = "^2.2.2"

[tool.poetry.scripts]
meet-api = "src.api.main:app"
meet-init-db = "scripts.init_db:main"
meet-init-qdrant = "scripts.init_qdrant:main"
meet-process = "src.pipeline.ingestion_pipeline:main"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "vaderSentiment.*",
    "transformers.*",
    "qdrant_client.*",
    "sentence_transformers.*",
    "sklearn.*",
    "nltk.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=src",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
pythonpath = ["."]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
precision = 2
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101"]  # assert_used

[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/yourusername/meet/issues"
"Documentation" = "https://meet.readthedocs.io"