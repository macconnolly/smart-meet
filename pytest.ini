# pytest configuration for Cognitive Meeting Intelligence

[tool:pytest]
# Test discovery patterns
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Test directories
testpaths = tests

# Minimum Python version
minversion = 3.11

# Command line options defaults
addopts = 
    # Show extra test summary info
    -ra
    # Show local variables in tracebacks
    -l
    # Strict markers
    --strict-markers
    # Warnings
    -W ignore::DeprecationWarning
    # Show slowest tests
    --durations=10
    # Coverage options (when --cov is used)
    --cov-branch
    --cov-report=term-missing:skip-covered
    --cov-fail-under=80

# Custom markers
markers =
    unit: Unit tests (fast, isolated)
    integration: Integration tests (may require external services)
    performance: Performance tests
    slow: Slow running tests
    requires_qdrant: Tests requiring Qdrant to be running
    requires_model: Tests requiring the ONNX model
    asyncio: Async tests (auto-applied by pytest-asyncio)

# Asyncio configuration
asyncio_mode = auto

# Coverage configuration
[coverage:run]
source = src
omit = 
    */tests/*
    */venv/*
    */__pycache__/*
    */migrations/*
    */scripts/*

[coverage:report]
precision = 2
show_missing = True
skip_covered = True
exclude_lines =
    # Standard pragma
    pragma: no cover
    
    # Don't complain about missing debug-only code
    def __repr__
    if self\.debug
    
    # Don't complain if tests don't hit defensive assertion code
    raise AssertionError
    raise NotImplementedError
    
    # Don't complain if non-runnable code isn't run
    if 0:
    if __name__ == .__main__.:
    
    # Type checking blocks
    if TYPE_CHECKING:
    @overload
    
    # Abstract methods
    @abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml

# Logging configuration for tests
[tool:pytest:logging]
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s - %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = tests.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(name)s - %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Pytest plugins configuration
[pytest-timeout]
timeout = 300
timeout_method = thread

[pytest-mock]
mock_use_standalone_module = true