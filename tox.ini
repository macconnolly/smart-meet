# Tox configuration for Cognitive Meeting Intelligence System

[tox]
envlist = py{39,310,311}, lint, type, security, docs
minversion = 4.0
isolated_build = true
skip_missing_interpreters = true

[testenv]
deps =
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/requirements-dev.txt
commands =
    pytest {posargs:tests/}
setenv =
    PYTHONPATH = {toxinidir}
    PYTHONDONTWRITEBYTECODE = 1
    PIP_DISABLE_PIP_VERSION_CHECK = 1
passenv = 
    HOME
    CI
    GITHUB_*
    QDRANT_URL
    DATABASE_URL

[testenv:lint]
description = Run all linting tools
skip_install = true
deps =
    black
    flake8
    flake8-docstrings
    flake8-bugbear
    isort
    bandit
commands =
    black --check --diff src/ tests/
    isort --check-only --diff src/ tests/
    flake8 src/ tests/
    bandit -r src/ -ll -i -x tests/

[testenv:format]
description = Auto-format code
skip_install = true
deps =
    black
    isort
commands =
    black src/ tests/
    isort src/ tests/

[testenv:type]
description = Run type checking
deps =
    mypy
    types-requests
    types-setuptools
commands =
    mypy src/

[testenv:security]
description = Run security checks
deps =
    bandit
    safety
    pip-audit
commands =
    bandit -r src/ -ll -i -x tests/
    safety check
    pip-audit

[testenv:docs]
description = Build documentation
deps =
    mkdocs
    mkdocs-material
    mkdocstrings[python]
commands =
    mkdocs build

[testenv:coverage]
description = Run tests with coverage report
deps =
    {[testenv]deps}
    coverage[toml]
commands =
    coverage run -m pytest
    coverage report
    coverage html
    coverage xml

[testenv:performance]
description = Run performance tests
deps =
    {[testenv]deps}
    pytest-benchmark
    memory-profiler
commands =
    pytest tests/performance/ -v --benchmark-only

[testenv:integration]
description = Run integration tests
deps =
    {[testenv]deps}
docker =
    qdrant/qdrant:latest
commands =
    pytest tests/integration/ -v -m integration

[testenv:clean]
description = Clean all generated files
skip_install = true
deps =
commands =
    python -c "import shutil; shutil.rmtree('.tox', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.pytest_cache', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.mypy_cache', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('htmlcov', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('dist', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('build', ignore_errors=True)"
    python -c "import pathlib; [p.unlink() for p in pathlib.Path('.').rglob('*.py[co]')]"
    python -c "import pathlib; [p.rmdir() for p in pathlib.Path('.').rglob('__pycache__')]"

[testenv:dev]
description = Development environment with all tools
usedevelop = true
deps =
    {[testenv]deps}
    ipython
    ipdb
    watchdog
commands =
    ipython

# Flake8 configuration
[flake8]
max-line-length = 100
extend-ignore = E203, W503, D100, D101, D102, D103, D104, D105, D106, D107
exclude = 
    .git,
    __pycache__,
    .tox,
    .eggs,
    *.egg,
    build,
    dist,
    .venv,
    venv
per-file-ignores =
    __init__.py:F401
    tests/*:D
max-complexity = 10

# isort configuration
[isort]
profile = black
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true